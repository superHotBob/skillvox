{"version":3,"sources":["pages/MainPage/Dashboard/styles.module.scss","pages/Login/styles.module.scss","pages/MainPage/Firms/styles.module.scss","components/Header/styles.module.scss","components/Sidebar/styles.module.scss","styles.module.scss","pages/MainPage/Users/styles.module.scss","pages/MainPage/Transactions/styles.module.scss","pages/MainPage/Setting/styles.module.scss","components/Footer/styles.module.scss","components/Layout/styles.module.scss","pages/Login/login.tsx","pages/MainPage/Firms/index.tsx","pages/MainPage/Users/index.tsx","pages/MainPage/Transactions/index.tsx","pages/MainPage/Dashboard/index.tsx","pages/MainPage/Setting/index.tsx","components/Footer/index.tsx","components/Header/index.tsx","components/Sidebar/index.tsx","components/Layout/index.tsx","pages/MainPage/index.tsx","App.tsx","index.tsx"],"names":["module","exports","GET_TOKENS","gql","LoginPage","history","useHistory","useLazyQuery","loading","member","error","data","password","name","className","styles","main","login_block","id","formData","labelLocation","width","dataField","isRequired","text","useSubmitBehavior","type","elementAttr","class","login_button","onClick","localStorage","setItem","push","to","login_button_guest","GET_COUNTRES","SET_COUNTRES","columns","FirmsPage","client","useApolloClient","useState","my_data","setData","my_country","setcountry","variables","ID","onCompleted","country","console","log","getCountry","useEffect","setTimeout","readQuery","query","useMutation","mutateFunction","table_header","message","items","placeholder","value","onValueChanged","e","selector","dataSource","keyExpr","defaultColumns","showBorders","table_data","users","UsersPage","transactions","TransactionsPage","DashboardPage","block_all_items","block_item","SettingPage","setname","Footer","footer","Header","set_name","link_to_main","link_to_login","name_member","MyLink","match","useRouteMatch","path","exact","style","color","fontWeight","borderLeft","backgroundColor","navLink","Sidebar","Layout","children","Fragment","MainPage","useQuery","component","App","app","ApolloClient","uri","cache","InMemoryCache","ReactDOM","render","ApolloProvider","StrictMode","forceRefresh","document","getElementById"],"mappings":"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","file":"static/js/main.979f4588.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"main\":\"styles_main__2o1N-\",\"block_all_items\":\"styles_block_all_items__1uGWj\",\"block_item\":\"styles_block_item__28bcr\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"main\":\"styles_main__1RW2b\",\"login_block\":\"styles_login_block__1bVlS\",\"login_button\":\"styles_login_button__w-0ec\",\"login_button_guest\":\"styles_login_button_guest__3czM7\",\"loading\":\"styles_loading__1NB83\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"main\":\"styles_main__1zHUO\",\"table_data\":\"styles_table_data__2bJQz\",\"selector\":\"styles_selector__6U7gz\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"footer\":\"styles_footer__2Y9gu\",\"link_to_main\":\"styles_link_to_main__234cB\",\"link_to_login\":\"styles_link_to_login__3kCqw\",\"name_member\":\"styles_name_member__2uSTg\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"main\":\"styles_main__QGV5Q\",\"navLink\":\"styles_navLink__n7Amo\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"app\":\"styles_app__26gb1\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"main\":\"styles_main__1tpB8\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"main\":\"styles_main__aPCPN\",\"table_header\":\"styles_table_header__3i8pI\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"main\":\"styles_main__3tG_E\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"footer\":\"styles_footer__29KBH\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"main\":\"styles_main__3L28C\",\"pages\":\"styles_pages__1RGNL\"};","import React from 'react';\r\nimport { Link, useHistory } from 'react-router-dom';\r\nimport styles from './styles.module.scss';\r\nimport { gql, useLazyQuery } from '@apollo/client';\r\nimport 'devextreme/dist/css/dx.light.css';\r\nimport Form, { Item, ButtonItem, ButtonOptions } from 'devextreme-react/form';\r\n\r\nconst GET_TOKENS = gql`\r\n  query GetTokens($password: String, $name: String) {\r\n    tokens(name: $name, password: $password) {\r\n      token\r\n      refreshtoken\r\n    }\r\n  }\r\n`;\r\n\r\nconst LoginPage = () => {\r\n  let history = useHistory();\r\n  const [getTokens, { loading, error, data }] = useLazyQuery(GET_TOKENS);\r\n  const member = {\r\n    password: '',\r\n    name: '',\r\n  };\r\n  // if (loading) return <p>Loading ...</p>;\r\n  // if (error) return `Error! ${error}`;\r\n  const Submit = () => {\r\n    localStorage.setItem('name', member.name);\r\n    if(member.name) {\r\n      history.push(\"/main\")\r\n    };         \r\n  }\r\n  return (\r\n    <div className={styles.main}>\r\n      <div className={styles.login_block}>\r\n        {loading && <h1 className={styles.loading}>AWAIT...</h1>}\r\n      \r\n            <h2>Login</h2>\r\n            <Form id=\"form\" formData={member} labelLocation=\"top\"  width=\"auto\">\r\n              <Item dataField=\"name\" isRequired={true} />              \r\n              <Item dataField=\"password\" isRequired={true} />\r\n              <ButtonItem>\r\n                <ButtonOptions\r\n                  text=\"Login\"\r\n                  // disabled={member.name.length === 0 }\r\n                  useSubmitBehavior={true}\r\n                  type=\"success\"\r\n                  width={'100%'}\r\n                  elementAttr={{ class: styles.login_button }}\r\n                  onClick={Submit}\r\n                />\r\n              </ButtonItem>            \r\n            </Form>\r\n            <Link to=\"/main\" className={styles.login_button_guest}>\r\n              Login how Guest\r\n            </Link>\r\n         \r\n     \r\n       \r\n      </div>\r\n    </div>\r\n  );\r\n};\r\nexport default LoginPage;\r\n","import React, { useState, useEffect } from 'react';\r\nimport styles from './styles.module.scss';\r\nimport DataGrid from 'devextreme-react/data-grid';\r\nimport { gql, useMutation, useLazyQuery, useApolloClient, InMemoryCache } from '@apollo/client';\r\nimport { Button } from 'devextreme-react';\r\nimport SelectBox from 'devextreme-react/select-box';\r\n\r\n\r\nconst GET_COUNTRES = gql`\r\n  query country($ID: ID!) {\r\n    country(code: $ID) {\r\n      capital\r\n      code\r\n      currency\r\n      name\r\n      emoji\r\n      phone\r\n    }\r\n  }\r\n`;\r\nconst SET_COUNTRES = gql`\r\n  mutation country {\r\n    country {\r\n      capital\r\n      code\r\n      currency\r\n      name\r\n      emoji\r\n      phone\r\n    }\r\n  }\r\n`;\r\n\r\nconst firms: Array<string> = [];\r\n\r\nconst columns = ['name', 'capital', 'code', 'currency', 'emoji', 'phone'];\r\n\r\nconst FirmsPage = () => {\r\n  const client = useApolloClient();\r\n  const [my_data, setData] = useState({});\r\n  const [my_country, setcountry] = useState('BY');\r\n\r\n  const [getCountry, { data }] = useLazyQuery(GET_COUNTRES, {\r\n    variables: { ID: my_country },\r\n    onCompleted: (data) => {\r\n      setData([data.country]);\r\n      console.log(data.country);\r\n    },\r\n  });\r\n\r\n  useEffect(() => {\r\n    setTimeout(() => {\r\n      const { country } = client.readQuery({\r\n        query: GET_COUNTRES,\r\n        variables: { ID: my_country },\r\n      });\r\n      setData([country]);\r\n    }, 2000);\r\n  }, []);\r\n  const [mutateFunction, { loading, error }] = useMutation<\r\n    { mutateFunction: Object },\r\n    { my_next_data: String }\r\n  >(SET_COUNTRES);\r\n\r\n  const onSetCountry = (e:any) => {\r\n    setcountry(e.value);\r\n    getCountry({ variables: { ID: e.value } })\r\n  }\r\n  return (\r\n    <div className={styles.main}>\r\n      <div className={styles.table_header}>\r\n      {loading && <h1>Submitting...</h1>}\r\n      {error && <h1>Submission error! ${error.message}</h1>}\r\n        {/* {['BR', 'UA', 'AE', 'BY', 'RU'].map((i) => (\r\n          <Button text={i} key={i} onClick={() => getCountry({ variables: { ID: i } })} />\r\n        ))} */}\r\n        <SelectBox \r\n          items={['BR', 'UA', 'AE', 'BY', 'RU']}\r\n          width={\"30%\"}\r\n          placeholder=\"Select country\"          \r\n          value={my_country}\r\n          onValueChanged={onSetCountry}\r\n          className={styles.selector}\r\n        />\r\n\r\n      \r\n        {my_data && (\r\n          <DataGrid\r\n            dataSource={my_data}\r\n            keyExpr=\"code\"\r\n            defaultColumns={columns}\r\n            showBorders={true}\r\n            className={styles.table_data}\r\n          />\r\n        )}\r\n        <Button onClick={() => mutateFunction()} text=\"cache\" />\r\n        {/* <p>{country.name}</p> */}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\nexport default FirmsPage;\r\n","import React from 'react';\r\nimport styles from './styles.module.scss';\r\nimport 'devextreme/dist/css/dx.light.css';\r\nimport DataGrid from 'devextreme-react/data-grid';\r\n\r\nconst columns = ['Name', 'Email', 'Is owner', 'Firm'];\r\nconst users: Array<string> = [];\r\n\r\nconst UsersPage = () => {\r\n  return (\r\n    <div className={styles.main}>\r\n      <DataGrid dataSource={users} keyExpr=\"ID\" defaultColumns={columns} showBorders={true} />\r\n    </div>\r\n  );\r\n};\r\nexport default UsersPage;\r\n","import React from 'react';\r\nimport styles from './styles.module.scss';\r\nimport DataGrid from 'devextreme-react/data-grid';\r\n\r\nconst columns = ['Data', 'Amount', 'Payment method (cc/ach)', 'destination account'];\r\n\r\nconst transactions: Array<null> = [];\r\n\r\nconst TransactionsPage = () => {\r\n  return (\r\n    <div className={styles.main}>\r\n      <DataGrid\r\n        dataSource={transactions}\r\n        keyExpr=\"ID\"\r\n        defaultColumns={columns}\r\n        showBorders={true}\r\n      />\r\n    </div>\r\n  );\r\n};\r\nexport default TransactionsPage;","import React from 'react';\r\nimport styles from './styles.module.scss';\r\n\r\n\r\nconst DashboardPage = () => {\r\n  return (\r\n    <div className={styles.main}>\r\n      <div className={styles.block_all_items}>\r\n        <div className={styles.block_item}>\r\n          <span>Processed amount (date period)</span>\r\n          <p>45</p>\r\n        </div>\r\n        <div className={styles.block_item}>\r\n          <span>Firms count</span>\r\n          <p>100</p>\r\n        </div>\r\n        <div className={styles.block_item}>\r\n          <span>Users count</span>\r\n          <p>1000</p>\r\n        </div>\r\n      \r\n        <div className={styles.block_item}>\r\n          <span>Onboarded users</span>\r\n          <p>54</p>\r\n        </div>\r\n        <div className={styles.block_item}>\r\n          <span>Firms on free plan</span>\r\n          <p>74</p>\r\n        </div>\r\n        <div className={styles.block_item}>\r\n          <span>Firms on plus plan</span>\r\n          <p>489</p>\r\n        </div>\r\n      </div>\r\n     \r\n    </div>\r\n  );\r\n};\r\nexport default DashboardPage;\r\n","import React, { useEffect, useState } from 'react';\r\nimport styles from './styles.module.scss';\r\nimport { gql, useLazyQuery, useApolloClient, InMemoryCache } from '@apollo/client';\r\nimport { Button } from 'devextreme-react';\r\n\r\nconst GET_COUNTRES = gql`\r\n  query country($ID: ID!) {\r\n    country(code: $ID) {\r\n     \r\n      name\r\n     \r\n    }\r\n  }\r\n`;\r\n\r\nconst SettingPage = () => {\r\n  const [name, setname] = useState('');\r\n\r\nconst client = useApolloClient();\r\n\r\n  const Name = () =>{ \r\n      const { country  } = client.readQuery({\r\n        query: GET_COUNTRES,\r\n        variables: { ID: \"BY\" },\r\n      });\r\n      setname(country.name);\r\n  };    \r\n    \r\n   \r\n\r\n  return (\r\n    <div className={styles.main}>\r\n      <Button text=\"MY_NAME\" onClick={Name} />\r\n      <h1>{name}</h1>\r\n    </div>\r\n  )\r\n};\r\nexport default SettingPage;\r\n","import React, { useState, useEffect } from 'react';\r\nimport styles from './styles.module.scss';\r\n\r\nconst Footer = () => {\r\n  return <h1 className={styles.footer}>footer</h1>;\r\n};\r\nexport default Footer;\r\n","import React, { useEffect, useState } from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport styles from './styles.module.scss';\r\n\r\nconst Header = () => {\r\n  const [name, set_name] = useState('');\r\n\r\n  useEffect(()=>set_name(!localStorage.name?'Guest':localStorage.name),[]);\r\n\r\n  return (\r\n    <div className={styles.footer}>\r\n      <Link to=\"/\">\r\n        <span className={styles.link_to_main}>MONE$Q_ADMIN</span>\r\n      </Link>\r\n      <Link to=\"/\" className={styles.link_to_login}>\r\n        Sign out\r\n      </Link>\r\n      <span className={styles.name_member}>{name}</span>\r\n    </div>\r\n  );\r\n};\r\nexport default Header;\r\n","import React from 'react';\r\nimport styles from './styles.module.scss';\r\nimport { Link, useRouteMatch } from 'react-router-dom';\r\n\r\ntype my_link = {\r\n  to: any;\r\n  text: string;\r\n};\r\n\r\nconst MyLink = ({ to, text }:my_link) => {\r\n  let match = useRouteMatch({\r\n    path: to,\r\n    exact: false,\r\n  });\r\n  return (\r\n    <Link\r\n      to={to}\r\n      style={{\r\n        color: '#000',\r\n        fontWeight: match ? 700 : 400,\r\n        borderLeft: match ? '2px solid #000' : 'none',\r\n        backgroundColor: match ? 'whitesmoke' : '',\r\n      }}\r\n      className={styles.navLink}\r\n    >\r\n      {text}\r\n    </Link>\r\n  );\r\n};\r\n\r\nconst Sidebar = () => {   \r\n    return (\r\n        <div className={styles.main}>\r\n            <MyLink to=\"/main/dashboard\"  text=\"Dashboard\" />          \r\n            <MyLink to=\"/main/firms\"  text=\"Firms\" />\r\n            <MyLink to=\"/main/users\"  text=\"Users\" />             \r\n            <MyLink to=\"/main/transactions\" text=\"Transactions\"/>           \r\n                    \r\n            <MyLink to=\"/main/setting\" text=\"Setting\" />             \r\n              \r\n        </div>\r\n    )\r\n}\r\nexport default Sidebar;\r\n","import React from 'react';\r\nimport Footer from '../Footer';\r\nimport Header from '../Header';\r\nimport Sidebar from '../Sidebar/index';\r\nimport styles from './styles.module.scss';\r\n\r\nconst Layout = ({ children }:any) => {\r\n    return (\r\n    <React.Fragment>\r\n       <Header />\r\n        <div className={styles.main}>\r\n            <Sidebar />\r\n            {children}\r\n        </div>\r\n        <Footer />\r\n    </React.Fragment>\r\n    );\r\n};\r\nexport default Layout;","import * as React from 'react';\r\nimport { gql, useQuery } from '@apollo/client';\r\nimport styles from './styles.module.scss';\r\nimport { Route, Switch } from 'react-router-dom';\r\nimport FirmsPage from './Firms/index';\r\nimport UsersPage from './Users';\r\nimport TransactionsPage from './Transactions';\r\nimport DashboardPage from './Dashboard';\r\nimport SettingPage from './Setting/index';\r\nimport Layout from '../../components/Layout';\r\nimport Sidebar from '../../components/Sidebar';\r\n\r\nconst GET_COUNTRES = gql`\r\n  query country($ID: ID!) {\r\n    country(code: $ID) {\r\n      capital\r\n      code\r\n      currency\r\n      name\r\n      emoji\r\n      phone\r\n    }\r\n  }\r\n`;\r\nconst MainPage = () => {\r\n  const { data } = useQuery(GET_COUNTRES, {\r\n    variables: { ID: 'BY' },\r\n  });\r\n  return ( \r\n    <Layout>\r\n      <Switch>\r\n        <Route path=\"/main/firms\" component={FirmsPage} />\r\n        <Route path=\"/main/users\" component={UsersPage} />\r\n        <Route path=\"/main/transactions\" component={TransactionsPage} />\r\n        <Route path=\"/main/dashboard\" component={DashboardPage} />\r\n        <Route path=\"/main/setting\" component={SettingPage} />\r\n      </Switch>\r\n    </Layout>\r\n    \r\n  );\r\n};\r\nexport default MainPage;\r\n","import { Switch, Route } from 'react-router-dom';\r\nimport styles from './styles.module.scss';\r\nimport LoginPage from './pages/Login/login';\r\nimport MainPage from './pages/MainPage/index';\r\n\r\nfunction App() {\r\n  return (\r\n    <div className={styles.app}>\r\n      <Switch>\r\n        <Route path=\"/main\">\r\n          <MainPage />\r\n        </Route>\r\n        <Route path=\"/\" exact>\r\n          <LoginPage />\r\n        </Route>\r\n      </Switch>\r\n    </div>\r\n  );\r\n}\r\nexport default App;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { BrowserRouter } from 'react-router-dom';\r\nimport { ApolloClient, InMemoryCache, ApolloProvider } from '@apollo/client';\r\nimport App from './App';\r\n\r\nconst client = new ApolloClient({\r\n  uri: 'https://countries.trevorblades.com/',\r\n  cache: new InMemoryCache(),\r\n});\r\n\r\nReactDOM.render(\r\n  <ApolloProvider client={client}>\r\n    <React.StrictMode>\r\n      <BrowserRouter forceRefresh={false}>\r\n       <App />\r\n      </BrowserRouter>\r\n    </React.StrictMode>\r\n  </ApolloProvider>,\r\n  document.getElementById('root'),\r\n);\r\n"],"sourceRoot":""}